<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE func-lib PUBLIC "-//Railo//DTD CFML Function Library 1.0//EN"
	"dtd/web-cfmfunctionlibrary_1_0.dtd">
<!-- http://www.getrailo.com/j2ee/dtd/web-jspfunctionlibrary_1_0.dtd -->
<func-lib>
	<flib-version>1.00</flib-version>
	<short-name>S3</short-name>
	<uri>http://extension.lucee.org/function/s3</uri>
	<display-name>PDF</display-name>
	<description>
		Functions to interact with S3 Resource
	</description>

	<!-- StoreAddACL -->
	<function>
		<name>StoreAddACL</name>
		<status>deprecated</status>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.StoreAddACL</class>
		<description>Adds ACL to existing ACL for object or bucket. This function operates identically to "S3AddACL", making it deprecated. The updated function offers greater flexibility in defining the endpoint.</description>
		<argument>
			<name>url</name>
			<type>string</type>
			<required>Yes</required>
			<description>Amazon S3 URL</description>
	    </argument>
		<argument>
			<name>aclObject</name>
			<alias>acl</alias>
			<type>object</type>
			<required>Yes</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- S3AddACL -->
	<function>
		<name>S3AddACL</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3AddACL</class>
		<description>Adds ACL to existing ACL for object or bucket. You can provide the endpoint as a bucket/object defintion (S3AddACL(bucket:"mybucket",object:"myobject.txt",acl:data) ) or as a virtual filesystem path (S3AddACL(path:"s3://mybucket/myobject.txt",acl:data) ).</description>
		<argument>
			<name>bucketNameOrPath</name>
			<alias>bucket,bucketName,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>This can be the bucketname or a virtual filesystem path for a file/directory (example "s3://mybucket/myobject.txt").</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>No</required>
			<default></default>
			<description>Name of the object (path) within the bucket of your object to read. In case you have defined a bucket with the first argument.</description>
	    </argument>
		<argument>
			<name>aclObject</name>
			<alias>acl</alias>
			<type>object</type>
			<required>Yes</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- StoreGetACL -->
	<function>
		<name>StoreGetACL</name>
		<status>deprecated</status>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.StoreGetACL</class>
		<description>Returns an array of structures, with each structure representing an ACL (Access Control List) grant. This function operates identically to "S3GetACL", making it deprecated. The updated function offers greater flexibility in defining the endpoint.</description>
		<argument>
			<name>url</name>
			<type>string</type>
				<required>Yes</required>
			<description>Amazon S3 URL</description>
	    </argument>
		<return>
			<type>Object</type>
		</return>
	</function>

	<!-- S3GetACL -->
	<function>
		<name>S3GetACL</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3GetACL</class>
		<description>Returns an array of structures, with each structure representing an ACL (Access Control List) grant. You can provide the endpoint as a bucket/object defintion (S3GetACL(bucket:"mybucket",object:"myobject.txt") ) or as a virtual filesystem path (S3GetACL(path:"s3://mybucket/myobject.txt") ).</description>
		<argument>
			<name>bucketNameOrPath</name>
			<alias>bucket,bucketName,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>This can be the bucketname or a virtual filesystem path for a file/directory (example "s3://mybucket/myobject.txt").</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>No</required>
			<default></default>
			<description>Name of the object (path) within the bucket of your object to read. In case you have defined a bucket with the first argument.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>object</type>
		</return>
	</function>
	<!-- StoreSetACL -->
	<function>
		<name>StoreSetACL</name>
		<status>deprecated</status>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.StoreSetACL</class>
		<description>Sets the ACL for object or bucket. This function operates identically to "S3SetACL", making it deprecated. The updated function offers greater flexibility in defining the endpoint.</description>
		<argument>
			<name>url</name>
			<type>string</type>
			<required>Yes</required>
			<description>Amazon S3 URL</description>
	    </argument>
		<argument>
			<name>aclObject</name>
			<alias>acl</alias>
			<type>object</type>
			<required>Yes</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- S3SetACL -->
	<function>
		<name>S3SetACL</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3SetACL</class>
		<description>Sets ACL to existing ACL for object or bucket. You can provide the endpoint as a bucket/object defintion (S3SetACL(bucket:"mybucket",object:"myobject.txt",acl:data) ) or as a virtual filesystem path (S3SetACL(path:"s3://mybucket/myobject.txt",acl:data) ).</description>
		<argument>
			<name>bucketNameOrPath</name>
			<alias>bucket,bucketName,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>This can be the bucketname or a virtual filesystem path for a file/directory (example "s3://mybucket/myobject.txt").</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>No</required>
			<default></default>
			<description>Name of the object (path) within the bucket of your object to read. In case you have defined a bucket with the first argument.</description>
	    </argument>
		<argument>
			<name>aclObject</name>
			<alias>acl</alias>
			<type>object</type>
			<required>Yes</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>


	<!-- StoreGetMetaData -->
	<function>
		<name>StoreGetMetaData</name>
		<status>deprecated</status>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.StoreGetMetaData</class>
        <introduced>5.0.0.000</introduced>
        <description>Returns the metadata related to the object or bucket. This function operates identically to "S3GetMetaData", making it deprecated. The updated function offers greater flexibility in defining the endpoint.</description>
		<argument>
			<name>url</name>
			<type>string</type>
				<required>Yes</required>
			<description>Amazon S3 URL</description>
	    </argument>
		<return>
			<type>struct</type>
		</return>
	</function>

	<!-- S3GetMetaData -->
	<function>
		<name>S3GetMetaData</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3GetMetaData</class>
		<description>Returns the metadata related to the object or bucket. You can provide the endpoint as a bucket/object defintion (S3GetMetaData(bucket:"mybucket",object:"myobject.txt") ) or as a virtual filesystem path (S3GetMetaData(path:"s3://mybucket/myobject.txt") ).</description>
		<argument>
			<name>bucketNameOrPath</name>
			<alias>bucket,bucketName,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>This can be the bucketname or a virtual filesystem path for a file/directory (example "s3://mybucket/myobject.txt").</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>No</required>
			<default></default>
			<description>Name of the object (path) within the bucket of your object to read. In case you have defined a bucket with the first argument.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>struct</type>
		</return>
	</function>

	<!-- StoreSetMetaData -->
	<function>
		<name>StoreSetMetaData</name>
		<status>deprecated</status>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.StoreSetMetaData</class>
        <introduced>5.0.0.000</introduced>
		<description>Sets the metadata on bucket or object. This function operates identically to "S3SetMetaData", making it deprecated. The updated function offers greater flexibility in defining the endpoint.</description>
		<argument>
			<name>url</name>
			<type>string</type>
			<required>Yes</required>
			<description>Amazon S3 URL</description>
	    </argument>
		<argument>
			<name>metadata</name>
			<type>struct</type>
			<required>Yes</required>
			<description></description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- S3SetMetaData -->
	<function>
		<name>S3SetMetaData</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3SetMetaData</class>
		<description>Sets the metadata on bucket or object. You can provide the endpoint as a bucket/object defintion (S3SetMetaData(bucket:"mybucket",object:"myobject.txt",metadata:data) ) or as a virtual filesystem path (S3SetMetaData(path:"s3://mybucket/myobject.txt",metadata:data) ).</description>
		<argument>
			<name>bucketNameOrPath</name>
			<alias>bucket,bucketName,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>This can be the bucketname or a virtual filesystem path for a file/directory (example "s3://mybucket/myobject.txt").</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>No</required>
			<default></default>
			<description>Name of the object (path) within the bucket of your object to read. In case you have defined a bucket with the first argument.</description>
	    </argument>
		<argument>
			<name>metadata</name>
			<type>struct</type>
			<required>Yes</required>
			<description></description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- S3Exists -->
	<function>
		<name>S3Exists</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Exists</class>
		<description>Checks if given object exists in </description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket of your object to check</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>no</required>
			<description>Name of the object (path) within the bucket of your object to ckeck</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- S3Read -->
	<function>
		<name>S3Read</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Read</class>
		<description>Reads an object from S3 as a string.</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket of your object to read</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the object (path) within the bucket of your object to read</description>
	    </argument>
		<argument>
			<name>charset</name>
			<type>string</type>
			<required>No</required>
			<default>UTF-8</default>
			<description>charset to use to store the content.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	<!-- S3ReadBinary -->
	<function>
		<name>S3ReadBinary</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3ReadBinary</class>
		<description>Reads an object from S3 as a binary.</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket of your object to read</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the object (path) within the bucket of your object to read</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>binary</type>
		</return>
	</function>

	<!-- S3Upload -->
	<function>
		<name>S3Upload</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Upload</class>
		<description>Uploads a file to S3.</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket of your object to write</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the object (path) within the bucket of your object to write</description>
	    </argument>
		<argument>
			<name>source</name>
			<type>object</type>
			<required>yes</required>
			<description>Source file to write to S3. A string path to a file or a object created with the function "fileOpen".</description>
	    </argument>
		<argument>
			<name>acl</name>
			<alias>aclObject</alias>
			<type>object</type>
			<required>No</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<argument>
			<name>location</name>
			<alias>region</alias>
			<type>string</type>
			<required>No</required>
			<description>location of the S3 storage.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>


	<!-- S3CreateBucket -->
	<function>
		<name>S3CreateBucket</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3CreateBucket</class>
		<description>Creates a bucket on S3.</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket to create</description>
	    </argument>
		<argument>
			<name>acl</name>
			<alias>aclObject</alias>
			<type>object</type>
			<required>No</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<argument>
			<name>location</name>
			<alias>region</alias>
			<type>string</type>
			<required>No</required>
			<description>location of the S3 storage.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- S3Write -->
	<function>
		<name>S3Write</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Write</class>
		<description>Writes a value to S3.</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket of your object to write</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the object (path) within the bucket of your object to write</description>
	    </argument>
		<argument>
			<name>value</name>
			<alias>content</alias>
			<type>object</type>
			<required>yes</required>
			<description>Value to write to S3. This can be a basic value, a binary, or a file reference defined like this: fileOpen("c:/my/file/path.txt").</description>
	    </argument>
		<argument>
			<name>charset</name>
			<type>string</type>
			<required>No</required>
			<default>UTF-8</default>
			<description>charset to use to store the content.</description>
	    </argument>
		<argument>
			<name>mimeType</name>
			<type>string</type>
			<required>No</required>
			<default>UTF-8</default>
			<description>MimeType of the value you are storing.</description>
	    </argument>
		<argument>
			<name>acl</name>
			<alias>aclObject</alias>
			<type>object</type>
			<required>No</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<argument>
			<name>location</name>
			<alias>region</alias>
			<type>string</type>
			<required>No</required>
			<description>location of the S3 storage.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- S3DeleteBucket -->
	<function>
		<name>S3DeleteBucket</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3DeleteBucket</class>
		<description>deletes a bucket, this function is deprecated, use instead S3Delete.</description>
		<status>deprecated</status>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket to list objects from.</description>
	    </argument>
		<argument>
			<name>force</name>
			<type>boolean</type>
			<required>No</required>
			<value>true</value>
			<description>Also delete bucket if it has content.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>query</type>
		</return>
	</function>

	<!-- S3Delete -->
	<function>
		<name>S3Delete</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Delete</class>
		<description>deletes a bucket or an object within a bucket.</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket to delete.</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object</alias>
			<type>string</type>
			<required>No</required>
			<description>Name of the object to delete, if not defined the bucket itself is deleted.</description>
	    </argument>
		<argument>
			<name>force</name>
			<type>boolean</type>
			<required>No</required>
			<value>true</value>
			<description>Also delete bucket if it has content.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>query</type>
		</return>
	</function>


	<!-- S3Download -->
	<function>
		<name>S3Download</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Download</class>
		 <description>Downloads an object from an S3 bucket. 
		 	It can save the object to a specified path, return its content directly, or process the content in parts through a provided closure or UDF (User-Defined Function).
		 </description>
    	<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket to download.</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the object to download.</description>
	    </argument>
		<argument>
			<name>target</name>
			<alias>closure,udf,function,path,file</alias>
			<type>any</type>
			<required>No</required>
			<value>true</value>
			<description>Optional. Defines the target where the downloaded data will be directed. 
				If a file path is provided, the data is saved to that path, the file path must be provided with help of the function "fileOpen" like this [fileOpen(path,"write")]. 
				If a closure or function is given, it will be invoked with parts of the downloaded data as its argument. 
				The function should accept a single argument named 'line' for line-by-line processing, 
				'string{Number}' for string blocks of a specified size, 
				or 'binary{Number}' for binary blocks of a specified size. 

				The function should return a boolean value: returning false will stop further reading from S3, 
				while true will continue the process. 

				If this argument is omitted, the function returns the downloaded data directly.</description>
   
	    </argument>
	    <argument>
			<name>charset</name>
			<type>string</type>
			<required>No</required>
			<default></default>
			<description>charset to use to store the content.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>any</type>
		</return>
	</function>



	<!-- S3ListBucket -->
	<function>
		<name>S3ListBucket</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3ListBucket</class>
		<description>List all objects in a bucket</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket to list objects from.</description>
	    </argument>
		
		<argument>
			<name>listener</name>
			<alias>closure,udf,function,component</alias>
			<type>any</type>
			<required>No</required>
			<value>true</value>
			<description>Optional. Defines the target where the downloaded data will be directed. 
				If a file path is provided, the data is saved to that path, the file path must be provided with help of the function "fileOpen" like this [fileOpen(path,"write")]. 
				If a closure or function is given, it will be invoked with parts of the downloaded data as its argument. 
				The function should accept a single argument named 'line' for line-by-line processing, 
				'string{Number}' for string blocks of a specified size, 
				or 'binary{Number}' for binary blocks of a specified size. 

				The function should return a boolean value: returning false will stop further reading from S3, 
				while true will continue the process. 

				If this argument is omitted, the function returns the downloaded data directly.</description>
   
	    </argument>

		<argument>
			<name>blockfactor</name>
			<alias>maxKeys,blockSize</alias>
			<type>numeric</type>
			<required>No</required>
			<default>1000</default>
			<description></description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>query</type>
		</return>
	</function>


	<!-- S3ListBuckets -->
	<function>
		<name>S3ListBuckets</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3ListBuckets</class>
		<description>List all buckets</description>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>query</type>
		</return>
	</function>

	<!-- S3ClearBucket -->
	<function>
		<name>S3ClearBucket</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3ClearBucket</class>
		<description>Removes all objects from a bucket, unless maxage is set, in that case only objects that are older than maxage are removed.</description>
		<argument>
			<name>bucketName</name>
			<alias>bucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the bucket to list objects from.</description>
	    </argument>
		<argument>
			<name>maxage</name>
			<alias>age</alias>
			<type>timespan</type>
			<required>No</required>
			<description>Max age of the object we keep, if not set all objects are removed.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>



	<!-- S3Copy -->
	<function>
		<name>S3Copy</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Copy</class>
		<description>Copies an object in S3 from one bucket to an other.</description>
		<argument>
			<name>srcBucketName</name>
			<alias>srcBucket,sourceBucketName,sourceBucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the source bucket of your object to copy</description>
	    </argument>
		<argument>
			<name>srcObjectName</name>
			<alias>sourceObjectName,srcObject,sourceObject</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the source object (path) within the bucket of your object to copy</description>
	    </argument>
		<argument>
			<name>trgBucketName</name>
			<alias>trgBucket,targetBucketName,targetBucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the target bucket of your object to copy</description>
	    </argument>
		<argument>
			<name>trgObjectName</name>
			<alias>targetObjectName,trgObject,targetObject</alias>
			<type>string</type>
			<required>No</required>
			<description>Name of the target object (path)for the target bucket. If not defined the source obbject name is used.</description>
	    </argument>
		<argument>
			<name>acl</name>
			<alias>aclObject</alias>
			<type>object</type>
			<required>No</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<argument>
			<name>location</name>
			<alias>region</alias>
			<type>string</type>
			<required>No</required>
			<description>location of the S3 storage.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>



	<!-- S3Move -->
	<function>
		<name>S3Move</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3Move</class>
		<description>Moves an object in S3 from one bucket to an other.</description>
		<argument>
			<name>srcBucketName</name>
			<alias>srcBucket,sourceBucketName,sourceBucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the source bucket of your object to move.</description>
	    </argument>
		<argument>
			<name>srcObjectName</name>
			<alias>sourceObjectName,srcObject,sourceObject</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the source object (path) within the bucket of your object to move.</description>
	    </argument>
		<argument>
			<name>trgBucketName</name>
			<alias>trgBucket,targetBucketName,targetBucket</alias>
			<type>string</type>
			<required>Yes</required>
			<description>Name of the target bucket of your object to move</description>
	    </argument>
		<argument>
			<name>trgObjectName</name>
			<alias>targetObjectName,trgObject,targetObject</alias>
			<type>string</type>
			<required>No</required>
			<description>Name of the target object (path)for the target bucket. If not defined the source object name is used.</description>
	    </argument>
		<argument>
			<name>acl</name>
			<alias>aclObject</alias>
			<type>object</type>
			<required>No</required>
			<description>an array of struct where each struct represents an ACL grant</description>
	    </argument>
		<argument>
			<name>location</name>
			<alias>region</alias>
			<type>string</type>
			<required>No</required>
			<description>location of the S3 storage.</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- S3GeneratePresignedURL -->
	<function>
		<name>S3GeneratePresignedURL</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3GeneratePresignedURL</class>
		<description>Generates a presigned URL pointing to the object given. You can provide the endpoint as a bucket/object defintion (S3AddACL(bucket:"mybucket",object:"myobject.txt") ) or as a virtual filesystem path (S3AddACL(path:"s3://mybucket/myobject.txt") ).</description>
		<argument>
			<name>bucketNameOrPath</name>
			<alias>bucket,bucketName,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>This can be the bucketname or a virtual filesystem path for a file/directory (example "s3://mybucket/myobject.txt").</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>No</required>
			<description>Name of the object (path) within the bucket of your object to read. In case you have defined a bucket with the first argument.</description>
	    </argument>
		<argument>
			<name>expireDate</name>
			<alias>expire</alias>
			<type>datetime</type>
			<required>No</required>
			<description>Date time when the URL should expire.</description>
	    </argument>
		<argument>
			<name>httpMethod</name>
			<alias>method</alias>
			<type>string</type>
			<required>No</required>
			<description>The desired HTTP method (e.g., GET, PUT). Defaults to GET.</description>
	    </argument>
		<argument>
			<name>sseAlgorithm</name>
			<alias>algorithm</alias>
			<type>string</type>
			<required>No</required>
			<description>The desired server-side encryption algorithm, valid values are AES256 or KMS.</description>
	    </argument>
		<argument>
			<name>sseCustomerKey</name>
			<alias>customerKey</alias>
			<type>string</type>
			<required>No</required>
			<description>The server-side encryption customer-provided key.</description>
	    </argument>
		<argument>
			<name>checksum</name>
			<alias>contentMd5</alias>
			<type>string</type>
			<required>No</required>
			<description>The base64 encoded MD5 checksum of the object's content.</description>
	    </argument>
		<argument>
			<name>type</name>
			<alias>contentType</alias>
			<type>string</type>
			<required>No</required>
			<description>The MIME type of the object (e.g., "text/plain").</description>
	    </argument>
		<argument>
			<name>disposition</name>
			<alias>contentDisposition</alias>
			<type>string</type>
			<required>No</required>
			<description>Specifies presentational information for the object, like "attachment; filename=\"filename.pdf\"".</description>
	    </argument>
		<argument>
			<name>encoding</name>
			<alias>contentEncoding</alias>
			<type>string</type>
			<required>No</required>
			<description>Specifies content encodings applied to the object, like gzip.</description>
	    </argument>
		<argument>
			<name>version</name>
			<alias>versionId</alias>
			<type>string</type>
			<required>No</required>
			<description>The version ID of the object if versioning is enabled.</description>
	    </argument>
		<argument>
			<name>zeroByte</name>
			<alias>zeroByteContent</alias>
			<type>boolean</type>
			<required>No</required>
			<description>A flag to specify if the object has zero-byte content.</description>
	    </argument>
		<argument>
			<name>responseHeaders</name>
			<alias>customResponseHeaders</alias>
			<type>struct</type>
			<required>No</required>
			<description>Struct of custom response headers for custom metadata prefixed with "x-amz-meta-" (prefix is optional, function will add it if missed).</description>
	    </argument>
		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
		<!-- S3GenerateURI -->
	<function>
		<name>S3GenerateURI</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3GenerateURI</class>
		<description>Generates a URI endpoint pointing to the object given. You can provide the endpoint as a bucket/object defintion (S3AddACL(bucket:"mybucket",object:"myobject.txt") ) or as a virtual filesystem path (S3AddACL(path:"s3://mybucket/myobject.txt") ).</description>
		<argument>
			<name>bucketNameOrPath</name>
			<alias>bucket,bucketName,path</alias>
			<type>string</type>
			<required>Yes</required>
			<description>This can be the bucketname or a virtual filesystem path for a file/directory (example "s3://mybucket/myobject.txt").</description>
	    </argument>
		<argument>
			<name>objectName</name>
			<alias>object,path</alias>
			<type>string</type>
			<required>No</required>
			<description>Name of the object (path) within the bucket of your object to read. In case you have defined a bucket with the first argument.</description>
	    </argument>
		<argument>
			<name>type</name>
			<alias>style</alias>
			<type>string</type>
			<required>No</required>
			<default>virtualhost</default>
			<values>virtualhost,path,arn,s3</values>
			<description>Defines the style/type created, possible values are:
				- virtualhost
				- path
				- arn
				- s3
				for more details, please see:
				https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html
				https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html
			</description>
	    </argument>
		<argument>
			<name>secure</name>
			<alias>secured</alias>
			<type>boolean</type>
			<required>No</required>
			<default>true</default>
			<description>Should a secure URL (https) be created or not. Only applies to type virtualhost and path.</description>
	    </argument>


		<argument>
			<name>accessKeyId</name>
			<alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 accessKeyId, if not defined it checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
	    </argument>
		<argument>
			<name>secretAccessKey</name>
			<alias>secretkey,awsSecretkey,awsSecretAccessKey</alias>
			<type>string</type>
			<required>No</required>
			<description>S3 secretAccessKey, if not defined it checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
	    </argument>
		<argument>
			<name>host</name>
			<alias>provider,server</alias>
			<type>string</type>
			<required>No</required>
			<description>the provider to connect, if not set Amazon AWS is used.</description>
	    </argument>
		<argument>
			<name>timeout</name>
			<type>number</type>
			<required>No</required>
			<default>10000</default>
			<description>timeout for this execution</description>
	    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
		<!-- S3GetApplicationSettings -->
	<function>
		<name>S3GetApplicationSettings</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3GetApplicationSettings</class>
		<description>return the current application settings for S3.</description>
		<status>hidden</status>
		<return>
			<type>struct</type>
		</return>
	</function>


	<!-- S3GetVersionInfo -->
	<!-- S3GetVersionInfo -->
<function>
    <name>S3GetVersionInfo</name>
    <class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.resource.s3.function.S3GetVersionInfo</class>
    <description>Returns version information as a query for a specific object or bucket.</description>
    <argument>
        <name>bucketName</name>
        <alias>bucket</alias>
        <type>string</type>
        <required>Yes</required>
        <description>Name of the bucket to get info for.</description>
    </argument>
    <argument>
        <name>objectName</name>
        <alias>object,path</alias>
        <type>string</type>
        <required>No</required>
        <description>Name of the object (path) within the bucket to get info for. If not defined, info of the bucket is returned.</description>
    </argument>
    <argument>
        <name>accessKeyId</name>
        <alias>accessKey,awsAccessKeyId,awsAccessKey</alias>
        <type>string</type>
        <required>No</required>
        <description>S3 accessKeyId. If not defined, checks the system property/environment variable for [lucee.s3.accesskeyid].</description>
    </argument>
    <argument>
        <name>secretAccessKey</name>
        <alias>secretKey,awsSecretKey,awsSecretAccessKey</alias>
        <type>string</type>
        <required>No</required>
        <description>S3 secretAccessKey. If not defined, checks the system property/environment variable for [lucee.s3.secretaccesskey].</description>
    </argument>
    <argument>
        <name>host</name>
        <alias>provider,server</alias>
        <type>string</type>
        <required>No</required>
        <description>The provider to connect to. If not set, Amazon AWS is used.</description>
    </argument>
    <argument>
        <name>timeout</name>
        <type>number</type>
        <required>No</required>
        <default>10000</default>
        <description>Timeout for this execution (in milliseconds).</description>
    </argument>
    <return>
        <type>query</type>
    </return>
</function>

</func-lib>
